{"version":3,"sources":["components/card/card-component.jsx","components/card-list/card-list-component.jsx","components/search-box/search-box-component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","handelChange","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mUAGaA,EAAO,SAACC,GAAD,OACpB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,6BACtB,6BAAKL,EAAMI,QAAQE,WCDVC,G,MAAW,SAACP,GAAD,OAAW,qBAAKC,UAAY,YAAjB,SAA8BD,EAAMQ,SAASC,KAAI,SAAAL,GAAO,OAAI,cAAC,EAAD,CAAMA,QAASA,GAAcA,EAAQC,WCFvHK,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACrB,uBACIX,UAAU,SACVY,KAAK,SACLF,YAAaA,EACbG,SAAUF,MC2BHG,E,kDA7Bb,aAAe,IAAD,8BACZ,gBAOFC,aAAe,SAACC,GAAD,OAAO,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SANzD,EAAKC,MAAQ,CACXd,SAAU,GACVW,YAAa,IAJH,E,qDAUd,WAAqB,IAAD,OAClBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACV,SAAUmB,S,oBAG1C,WACE,MAAkCC,KAAKN,MAA/Bd,EAAR,EAAQA,SAAUW,EAAlB,EAAkBA,YACZU,EAAmBrB,EAASsB,QAAO,SAAA1B,GAAO,OAAIA,EAAQE,KAAKyB,cAAcC,SAASb,EAAYY,kBACpG,OACE,sBAAK9B,UAAU,MAAf,UACE,oBAAIA,UAAU,YAAd,8BACA,cAAC,EAAD,CAAWY,KAAK,SAASF,YAAY,kBAAkBC,aAAcgB,KAAKZ,eAC1E,cAAC,EAAD,CAAUR,SAAUqB,W,GAxBVI,IAAMC,WCOTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.6910200d.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css'\r\n\r\nexport const Card = (props) => \r\n<div className='card-container'>\r\n    <img alt='monster' src={`https://robohash.org/${props.monster.id}}?set=set2&size=180x180`}></img>\r\n    <h1>{props.monster.name}</h1>\r\n</div>","import React from 'react';\r\nimport { Card } from '../card/card-component.jsx';\r\nimport './card-list.styles.css';\r\n\r\n\r\nexport const CardList = (props) => <div className = 'card-list'>{props.monsters.map(monster => <Card monster={monster} key={monster.id}/>)}</div>","import React from 'react';\r\nimport './search-box-component-styles.css';\r\n\r\nexport const SearchBox = ( {placeholder, handleChange}) =>\r\n    <input\r\n        className='search'\r\n        type='search'\r\n        placeholder={placeholder}\r\n        onChange={handleChange}>\r\n    </input>\r\n","import React from 'react';\nimport './App.css';\nimport { CardList } from './components/card-list/card-list-component.jsx';\nimport { SearchBox } from './components/search-box/search-box-component.jsx'\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      monsters: [],\n      searchField: ''\n    }\n  }\n\n  handelChange = (e) => this.setState({searchField: e.target.value})\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({monsters: users}));\n  }\n\n  render() {\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase()));\n    return (\n      <div className='App'> \n        <h1 className='App-title'>Monsters Rolodex</h1>\n        <SearchBox type='search' placeholder='search monsters' handleChange={this.handelChange}></SearchBox>  \n        <CardList monsters={filteredMonsters}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}